{"version":3,"sources":["ScreenHome.js","Nav.js","ScreenArticlesBySource.js","ScreenMyArticles.js","ScreenSource.js","reducer/configureStore.js","reducer/user.reducer.js","reducer/article.reducer.js","App.js","serviceWorker.js","index.js"],"names":["i","connect","dispatch","signIn","user","type","props","useState","signUpUsername","setSignUpUsername","signUpEmail","setSignUpEmail","signUpPassword","setSignUpPassword","signInEmail","setSignInEmail","signInPassword","setSignInPassword","userExiste","setUserExiste","isModalVisible","setIsModalVisible","modalTitle","setModalTitle","modalDescription","setModalDescription","showModal","handleSubmitSignUp","fetch","method","headers","body","data","json","userData","result","console","log","error","join","handleSubmitSignIn","userId","to","className","placeholder","onChange","e","target","value","Password","style","width","onClick","title","visible","onOk","onCancel","state","handleSignOut","textAlign","mode","theme","Item","key","API_KET","process","Meta","Card","addToWishList","article","id","useParams","setUserId","articleList","setArticleList","articleTitle","setArticleTitle","articledesc","setArticleDesc","articleImg","setArticleImg","handleLike","description","urlToImage","handleOk","handleCancel","useEffect","rawResponse","response","articles","loadArticles","addArticles","map","display","justifyContent","margin","flexDirection","cover","alt","src","actions","DeleteWishList","myArticle","setMyArticle","articleData","myArticles","length","RechargeArticles","handleDelete","sourceList","setSourceList","sources","loadData","itemLayout","dataSource","renderItem","item","avatar","category","name","persistConfig","storage","storageSession","whitelist","rootReducer","combineReducers","action","articleListCopy","findDuplicate","find","undefined","push","articleListDeleteCopy","position","splice","persistedReducer","persistReducer","store","createStore","persistor","persistStore","App","loading","exact","path","component","ScreenHome","ScreenArticlesBySource","ScreenMyArticles","ScreenSource","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dba79d4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './App.css';\r\nimport { Input, Button, Modal}  from 'antd';\r\n\r\n\r\nfunction ScreenHome(props) {\r\n\r\n    // Sign-Up Data\r\n    const [signUpUsername, setSignUpUsername] = useState(\"\");\r\n    const [signUpEmail, setSignUpEmail] = useState(\"\");\r\n    const [signUpPassword, setSignUpPassword] = useState(\"\");\r\n\r\n    // Sign-In Data\r\n    const [signInEmail, setSignInEmail] = useState(\"\");\r\n    const [signInPassword, setSignInPassword] = useState(\"\");\r\n    const [userExiste, setUserExiste] = useState(false);\r\n\r\n    // set erreurModal\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [modalTitle, setModalTitle] = useState(\"Error\");\r\n    const [modalDescription, setModalDescription] = useState(\"\");\r\n\r\n    const showModal = () => {\r\n      setIsModalVisible(true);\r\n      setModalTitle(modalTitle);\r\n    };\r\n  \r\n    const handleOk = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n  \r\n    const handleCancel = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n\r\n    //Sign up\r\n    let handleSubmitSignUp = async () => {\r\n        const data = await fetch(\"/users/sign-up\", {\r\n            method: \"post\",\r\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\"},\r\n            body: `signUpUsername=${signUpUsername}&signUpEmail=${signUpEmail}&signUpPassword=${signUpPassword}`,\r\n        });\r\n\r\n        const userData = await data.json();\r\n\r\n        if (userData.result === true) {\r\n            console.log(\"Enregistrement OK\")\r\n            setModalDescription(\"Enregistrement OK\");\r\n            showModal()\r\n        } else {\r\n            console.log(userData.error);\r\n            setModalDescription(userData.error.join(\", \"))\r\n            showModal()\r\n        }\r\n    }\r\n    \r\n    //Sign in\r\n    let handleSubmitSignIn = async () => {\r\n        const data = await fetch(\"/users/sign-in\", {\r\n            method: \"post\",\r\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\"},\r\n            body: `signInEmail=${signInEmail}&signInPassword=${signInPassword}`,\r\n        });\r\n\r\n        const userData = await data.json();\r\n\r\n        if (userData.result === true) {\r\n            console.log(\"Connexion Réussie\")\r\n            // console.log(userData)\r\n            setUserExiste(true);\r\n            props.signIn(userData.userId) \r\n            // console.log(userData.userId)\r\n        } else {\r\n            console.log(userData.error);\r\n            setModalDescription(userData.error.join(\", \"))\r\n            showModal()\r\n        }\r\n    }\r\n\r\n    if (userExiste) {\r\n        return (<Redirect to='/ScreenSource' />);\r\n    }\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"Login-page\" >\r\n\r\n        {/* SIGN-IN */}\r\n\r\n        <div className=\"Sign\">        \r\n                <Input className=\"Login-input\" placeholder=\"arthur@lacapsule.com\" \r\n                    onChange={(e) => setSignInEmail(e.target.value)} value={signInEmail}/>\r\n\r\n                <Input.Password className=\"Login-input\" placeholder=\"password\" \r\n                    onChange={(e) => setSignInPassword(e.target.value)} value={signInPassword}/>\r\n\r\n                <Button style={{width:'80px'}} type=\"primary\"\r\n                    onClick={() => handleSubmitSignIn(signInEmail, signInPassword)}>Sign-in</Button>\r\n        </div>\r\n\r\n        {/* SIGN-UP */}\r\n\r\n        <div className=\"Sign\">        \r\n\r\n                <Input className=\"Login-input\" placeholder=\"Arthur G\" \r\n                    onChange={(e) => setSignUpUsername(e.target.value)} value={signUpUsername}/>\r\n\r\n                <Input className=\"Login-input\" placeholder=\"e-mail\" \r\n                    onChange={(e) => setSignUpEmail(e.target.value)} value={signUpEmail}/>\r\n\r\n                <Input.Password className=\"Login-input\" placeholder=\"password\"      \r\n                    onChange={(e) => setSignUpPassword(e.target.value)} value={signUpPassword}/>\r\n\r\n                <Button style={{width:'80px'}} type=\"primary\"\r\n                    onClick={() => handleSubmitSignUp(signUpUsername, signUpEmail, signUpPassword)}>Sign-up</Button>\r\n        </div>\r\n\r\n        <Modal title={modalTitle} visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <p>{modalDescription}</p>\r\n        </Modal>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n    function mapDispatchToProps (dispatch) {\r\n        return {\r\n            signIn : (user) => dispatch({ type: 'USER_SIGN_IN', user}),\r\n        };\r\n    }\r\n\r\nexport default connect(null, mapDispatchToProps)(ScreenHome);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport {Menu, Icon} from 'antd'\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nfunction Nav(props) {\r\n\r\n  return (\r\n    <nav >\r\n      <Menu style={{textAlign: 'center'}} mode=\"horizontal\" theme=\"dark\">\r\n\r\n        <Menu.Item key=\"mail\">\r\n            <Link to=\"/ScreenSource\">\r\n                <Icon type=\"home\" />\r\n                Sources\r\n            </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"test\">\r\n            <Link to=\"/ScreenMyArticles\">\r\n                <Icon type=\"read\" />\r\n                My Articles\r\n            </Link>\r\n        </Menu.Item>\r\n\r\n        <Menu.Item key=\"app\">\r\n            <Link to=\"/\">\r\n                <Icon onClick={()=> props.handleSignOut()} type=\"logout\" />\r\n                Logout\r\n            </Link>\r\n        </Menu.Item>\r\n\r\n      </Menu>\r\n    </nav>\r\n  );\r\n}\r\n\r\n\r\nfunction mapStateToProps (state) {\r\n    return { user: state.user}\r\n}   \r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n    return {\r\n        handleSignOut: function(user) {\r\n          dispatch( {type: 'USER_SIGN_OUT', user} );\r\n      },\r\n    };\r\n   };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);\r\n","import React, {useState, useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useParams } from \"react-router-dom\"\r\nimport './App.css';\r\nimport { Card, Icon, Modal} from 'antd';\r\nimport Nav from './Nav'\r\n\r\nconst API_KET = process.env.REACT_APP_NEWS_API_KEY\r\n\r\n\r\nconst { Meta } = Card;\r\n\r\n\r\nfunction ScreenArticlesBySource(props) {\r\n\r\n\r\n    var { id } = useParams()\r\n\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [articleList, setArticleList] = useState([])\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalDescription, setModalDescription] = useState(\"\");\r\n    const [articleTitle, setArticleTitle] = useState(\"\");\r\n    const [articledesc, setArticleDesc] = useState(\"\");\r\n    const [articleImg, setArticleImg] = useState(\"\");\r\n\r\n    // Ajouter des articles au MyArticle\r\n    let handleLike = (article) => {\r\n        // console.log(props)\r\n        // console.log(article)\r\n        setUserId(props.user)\r\n        setArticleTitle(article.title);\r\n        setArticleDesc(article.description);\r\n        setArticleImg(article.urlToImage);\r\n        props.addToWishList(article);\r\n    }\r\n\r\n    // Controleur Modal\r\n    const showModal = (title, description) => {\r\n        setIsModalVisible(true);\r\n        setModalTitle(title);\r\n        setModalDescription(description);\r\n      };\r\n    \r\n      const handleOk = () => {\r\n        setIsModalVisible(false);\r\n      };\r\n    \r\n      const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n      };\r\n\r\n\r\n    \r\n    // Chargement des articles\r\n    useEffect(() => {\r\n        async function loadArticles(){\r\n            let rawResponse = await fetch(\r\n                `https://newsapi.org/v2/top-headlines?sources=${id}&language=fr&sortBy=popularity&apiKey=${API_KET}`\r\n            )\r\n            let response = await rawResponse.json();\r\n            setArticleList(response.articles);\r\n            //console.log(\"test\", response)\r\n            //console.log(articleList)\r\n        }\r\n        loadArticles();\r\n    }, []);\r\n\r\n    // Ajouter des articles\r\n    useEffect(() => {\r\n        async function addArticles(){\r\n\r\n            let data = await fetch(\"/add-article\", {\r\n                method: \"post\",\r\n                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\"},\r\n                body: `userId=${userId}&articleTitle=${articleTitle}&articleDesc=${articledesc}&articleImg=${articleImg}`,\r\n            });\r\n    \r\n            let articleData = await data.json();\r\n    \r\n            if (articleData === true){\r\n                console.log(\"Article est bien enregistré\")\r\n            }\r\n        }\r\n        addArticles();\r\n    }, [ handleLike ]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n            <Nav/>\r\n\r\n            <div className=\"Banner\"/>\r\n\r\n            <div className=\"Card\">\r\n                {articleList.map((article, i) => (\r\n                    \r\n                \r\n              <div key={i} style={{display:'flex',justifyContent:'center'}}>\r\n\r\n                <Card\r\n                  style={{ \r\n                  width: 300, \r\n                  margin:'15px', \r\n                  display:'flex',\r\n                  flexDirection: 'column',\r\n                  justifyContent:'space-between' }}\r\n                  cover={<img alt=\"example\" src={article.urlToImage}/>}\r\n                  actions={[<Icon onClick={() => showModal(article.title, article.description)} type=\"read\" key=\"ellipsis2\" />, \r\n                            <Icon onClick={() => handleLike(article)} type=\"like\" key=\"ellipsis\"/>\r\n                            ]}>\r\n                  <Meta title={article.title} description={article.description}/>\r\n                </Card>\r\n\r\n                <Modal title={modalTitle} visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <p>{modalDescription}</p>\r\n                </Modal>\r\n              </div>\r\n    ))}            \r\n           </div>\r\n            \r\n      </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n    return { user: state.user}\r\n}   \r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n    return {\r\n        addToWishList: function(article) {\r\n          dispatch( {type: 'ADD_ARTICLE', article} );\r\n      },\r\n    };\r\n   };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScreenArticlesBySource);\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { Card, Icon, Modal} from 'antd';\r\nimport Nav from './Nav'\r\nimport {connect} from 'react-redux';\r\n\r\nconst { Meta } = Card;\r\n\r\nfunction ScreenMyArticles(props) {\r\n\r\n    const [userId, setUserId] = useState(props.user);\r\n    const [myArticle, setMyArticle] = useState([]);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [modalTitle, setModalTitle] = useState(\"\");\r\n    const [modalDescription, setModalDescription] = useState(\"\");\r\n\r\n\r\n    // Controleur Modal\r\n    const showModal = (title, description) => {\r\n        setIsModalVisible(true);\r\n        setModalTitle(title);\r\n        setModalDescription(description);\r\n      };\r\n    \r\n      const handleOk = () => {\r\n        setIsModalVisible(false);\r\n      };\r\n    \r\n      const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n      };\r\n\r\n\r\n    // // ver 1. Chargement des article (avec state)\r\n    // useEffect(() => {\r\n    //     setMyArticle(props.articles);\r\n    // },[props]);\r\n\r\n    // ver 2. Chargement des article (avec DB)\r\n    useEffect(() => {\r\n        let RechargeArticles = async () => {\r\n            const data = await fetch(\"/get-article\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/x-www-form-urlencoded\"},\r\n                body: `userId=${userId}`,\r\n            });\r\n    \r\n            const articleData = await data.json();\r\n            console.log(articleData.myArticles)\r\n         if (articleData.myArticles) {   \r\n            console.log(\"Article est bien chargé\")\r\n            setMyArticle(articleData.myArticles)\r\n        } else if (articleData.myArticles.length == 0) {\r\n            console.log(\"Il n'a pas d'article a charger\")\r\n        }\r\n        }\r\n        RechargeArticles();\r\n    }, []);\r\n\r\n    // Supprimer un article\r\n    let handleDelete = async (articleTitle) => {\r\n        const rawResponse = await fetch(\"/delete-article\", {\r\n            method: \"post\",\r\n            headers: { \"Content-Type\": \"application/x-www-form-urlencoded\"},\r\n            body: `userId=${userId}&articleTitle=${articleTitle}`,\r\n        });\r\n\r\n        const response = await rawResponse.json();\r\n\r\n        if (response.result === true) {\r\n            console.log(\"L'article a été supprimé\")\r\n            setMyArticle(response.myArticles)\r\n            // console.log(userData)\r\n        } else {\r\n            console.log(response.error);\r\n        }\r\n    }\r\n\r\n\r\n  return (\r\n    <div>\r\n            <Nav/>\r\n            <div className=\"Banner\"/>\r\n            <div className=\"Card\">\r\n                {myArticle.map((article, i) => (\r\n    \r\n                    <div key={i} style={{display:'flex',justifyContent:'center'}}>\r\n                      <Card\r\n                        style={{  \r\n                        width: 300, \r\n                        margin:'15px', \r\n                        display:'flex',\r\n                        flexDirection: 'column',\r\n                        justifyContent:'space-between' }}\r\n                        cover = {<img alt=\"example\" src={article.urlToImage}/>                        \r\n                        }\r\n                        \r\n                        actions={[<Icon onClick={() => showModal(article.title, article.description)} type=\"read\" key=\"ellipsis2\" />, \r\n                                  <Icon onClick={() => handleDelete(article.title)} type=\"delete\" key=\"ellipsis\" />        \r\n                        /* <Icon onClick={() => props.DeleteWishList(article.title)} type=\"delete\" key=\"ellipsis\" /> */\r\n                        ]}\r\n                        >\r\n                        <Meta title={article.title} description={article.description}/>\r\n                      </Card>\r\n\r\n                      <Modal title={modalTitle} visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                        <p>{modalDescription}</p>\r\n                      </Modal>\r\n                    </div>\r\n    ))}\r\n             </div>\r\n      </div>\r\n  );\r\n}\r\n\r\n\r\nfunction mapStateToProps (state) {\r\n    return { user: state.user, articles: state.article}\r\n}\r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n    return {\r\n        DeleteWishList: function(title) {\r\n          dispatch( {type: 'DELETE_ARTICLE', title} );\r\n      },\r\n    };\r\n   };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScreenMyArticles);\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport './App.css';\r\nimport { List, Avatar} from 'antd';\r\nimport Nav from './Nav'\r\n\r\nconst API_KET = process.env.REACT_APP_NEWS_API_KEY\r\n\r\nfunction ScreenSource(props) {\r\n\r\n    const [sourceList, setSourceList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function loadData() {\r\n            let rawResponse = await fetch(\r\n                `https://newsapi.org/v2/top-headlines/sources?country=fr&language=fr&apiKey=${API_KET}`\r\n            );\r\n            let response = await rawResponse.json();\r\n            setSourceList(response.sources)\r\n        }\r\n        loadData();\r\n    }, [])\r\n    // console.log(props)\r\n    // console.log(sourceList)\r\n    \r\n\r\n  return (\r\n    <div>\r\n        <Nav/>\r\n       \r\n       <div className=\"Banner\"/>\r\n\r\n       <div className=\"HomeThemes\">\r\n          \r\n              <List\r\n                  itemLayout=\"horizontal\"\r\n                  dataSource={sourceList}\r\n                  renderItem={item => (\r\n                    <List.Item>\r\n                      <List.Item.Meta\r\n                        avatar={<Avatar src={`/images/${item.category}.png`} />}\r\n                        title={<Link to={`/ScreenArticlesBySource/${item.id}`}>{item.name} </Link>}\r\n                        description={item.description}\r\n                      />\r\n                    </List.Item>\r\n                  )}\r\n                />\r\n\r\n          </div>\r\n                 \r\n      </div>\r\n  );\r\n}\r\n\r\nfunction mapStateToProps (state) {\r\n    return { user: state.user}\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ScreenSource);\r\n\r\n","// reducers/index.js\r\nimport { combineReducers } from \"redux\";\r\nimport { persistReducer } from 'redux-persist'\r\n\r\n// Option 1 session Storage\r\nimport storageSession from 'redux-persist/lib/storage/session'; \r\n// Option2 localStorage \r\n//import storage from \"redux-persist/lib/storage\";\r\n\r\nimport user from \"./user.reducer\";\r\nimport article from \"./article.reducer\";\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage: storageSession, // Using storage\r\n    whitelist: [\"user\", \"article\"], // Data persiste\r\n     // Exception blacklist : [\"xxx\"]\r\n  };\r\n\r\n\r\n  // merge\r\nconst rootReducer = combineReducers({user, article});\r\n\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport default persistedReducer","export default function(user = {}, action) {\r\n    switch (action.type) {\r\n        case 'USER_SIGN_IN' : {\r\n            return action.user\r\n        }\r\n        case 'USER_SIGN_OUT' : {\r\n            return {}\r\n        }\r\n        default : \r\n            return user\r\n    }\r\n}","export default function(articleList = [], action) {\r\n    switch (action.type) {\r\n        case 'ADD_ARTICLE': \r\n            var articleListCopy = [...articleList];\r\n            var findDuplicate = articleListCopy.find((e) => e.title == action.article.title);\r\n            \r\n            if (findDuplicate == undefined) {\r\n            articleListCopy.push(action.article);\r\n        } return articleListCopy;\r\n\r\n        case 'DELETE_ARTICLE': \r\n            var articleListDeleteCopy = [...articleList];\r\n            console.log(articleListDeleteCopy)\r\n            console.log(action)\r\n            var position = null;\r\n\r\n            for (let i=0; i < articleListDeleteCopy.length; i++){\r\n                if (articleListDeleteCopy[i].title == action.title ){\r\n                    position = i;\r\n                }}\r\n\r\n            if (position != null) {\r\n                articleListDeleteCopy.splice(position, 1);\r\n        } return articleListDeleteCopy;\r\n\r\n       default : \r\n            return articleList;\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n//import count from './count.reducer';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport { persistStore } from \"redux-persist\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport ScreenHome from './ScreenHome';\r\nimport ScreenArticlesBySource from './ScreenArticlesBySource';\r\nimport ScreenMyArticles from './ScreenMyArticles';\r\nimport ScreenSource from './ScreenSource';\r\nimport persistedReducer from './reducer/configureStore';\r\n\r\nconst store = createStore(persistedReducer);\r\nconst persistor = persistStore(store);\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n        <PersistGate loading={null} persistor={persistor}>\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\" component={ScreenHome} />\r\n                <Route path=\"/ScreenArticlesBySource/:id\" component={ScreenArticlesBySource} />\r\n                <Route path=\"/ScreenMyArticles\" component={ScreenMyArticles} />\r\n                <Route path=\"/ScreenSource\" component={ScreenSource} />\r\n            </Switch>\r\n        </Router>\r\n        </PersistGate>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}